/**
 * StagCopyLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.EventsController;
const CreateEventRequest = testerlib.CreateEventRequest;
const EditAnEventRequest = testerlib.EditAnEventRequest;

describe("EventsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testGetAllEvents response", function testGetAllEventsTest(done) {
        controller.getAllEvents(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateEvent response", function testCreateEventTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "starts_at": "2019-04-30T11:21:03.693Z",
  "ends_at": "2019-04-30T11:21:03.693Z",
  "title": "Reunion Jawa",
  "creator": "5cc82f9f9451710abfb601e9",
  "location": "SM24",
  "description": "Kappa",
  "attendees": [
    "5cc82f9f9451710abfb601e9"
  ]
}, 'CreateEventRequest');

        controller.createEvent(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testEditAnEvent response", function testEditAnEventTest(done) {
        // parameters for the API call
        let id = '5cefa861233ebb33a7d94999';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "location": "SM"
}, 'EditAnEventRequest');

        controller.updateEditAnEvent(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testDeleteEvent response", function testDeleteEventTest(done) {
        // parameters for the API call
        let id = '5cefa861233ebb33a7d94999';

        controller.deleteEvent(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testGetAllEvents1 response", function testGetAllEvents1Test(done) {
        controller.getAllEvents1(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateEvent1 response", function testCreateEvent1Test(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "starts_at": "2019-04-30T11:21:03.693Z",
  "ends_at": "2019-04-30T11:21:03.693Z",
  "title": "Reunion Jawa",
  "creator": "5cc82f9f9451710abfb601e9",
  "location": "SM24",
  "description": "Kappa",
  "attendees": [
    "5cc82f9f9451710abfb601e9"
  ]
}, 'CreateEventRequest');

        controller.createEvent1(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testEditAnEvent1 response", function testEditAnEvent1Test(done) {
        // parameters for the API call
        let id = '5cefa861233ebb33a7d94999';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "location": "SM234"
}, 'EditAnEventRequest');

        controller.updateEditAnEvent1(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testDeleteEvent1 response", function testDeleteEvent1Test(done) {
        // parameters for the API call
        let id = '5cefc444d104cd369e794d7b';

        controller.deleteEvent1(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testGetEventInfoFromID response", function testGetEventInfoFromIDTest(done) {
        // parameters for the API call
        let id = '5cefc445d104cd369e794d7c';

        controller.getEventInfoFromID(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testGetUserSEvent response", function testGetUserSEventTest(done) {
        controller.getUserSEvent(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });
});
