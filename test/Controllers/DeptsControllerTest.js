/**
 * StagCopyLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.DeptsController;
const SelfActivateDepretiatedRequest = testerlib.SelfActivateDepretiatedRequest;
const Body = testerlib.Body;
const CreateEventRequest = testerlib.CreateEventRequest;
const Paginated = testerlib.Paginated;
const CreateOneWithPassword = testerlib.CreateOneWithPassword;
const Header = testerlib.Header;
const EditAnEventRequest = testerlib.EditAnEventRequest;
const Scope = testerlib.Scope;
const FailureException = testerlib.FailureException;
const Verification = testerlib.Verification;
const LogInAuthoriseRequest = testerlib.LogInAuthoriseRequest;
const FailureOnNotActivatedUserException = testerlib.FailureOnNotActivatedUserException;
const Success = testerlib.Success;


describe("DeptsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testListDepartments response", function testListDepartmentsTest(done) {
        controller.listDepartments(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testCreateOneDepartment response", function testCreateOneDepartmentTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = '{\n\t"name": {{string}}, \n\t"supervisors": {{object_id[]}}, \n\t"members": {{object_id[]}}\n}';

        controller.createOneDepartment(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDGetDepartment response", function testByIDGetDepartmentTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';

        controller.getByIDGetDepartment(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDDeleteDeperment response", function testByIDDeleteDepermentTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';

        controller.deleteByIDDeleteDeperment(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDEditDeparment response", function testByIDEditDeparmentTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';
        let contentType = 'application/json';
        let body = '{\n\t"name": {{string}}, \n\t"supervisors": {{object_id[]}}, \n\t"members": {{object_id[]}}\n}';

        controller.updateByIDEditDeparment(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDAddDeptMembers response", function testByIDAddDeptMembersTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';
        let contentType = 'application/json';
        let body = '{\n\t"members": {{object_id[]}}\n}';

        controller.createByIDAddDeptMembers(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDEditDeptMembers response", function testByIDEditDeptMembersTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';
        let contentType = 'application/json';
        let body = '{\n\t"members": {{object_id[]}}\n}';

        controller.updateByIDEditDeptMembers(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDAddDeptSupervisors response", function testByIDAddDeptSupervisorsTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';
        let contentType = 'application/json';
        let body = '{\n\t"supervisors": {{object_id[]}}\n}';

        controller.createByIDAddDeptSupervisors(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testByIDEditDeptSupervisors response", function testByIDEditDeptSupervisorsTest(done) {
        // parameters for the API call
        let id = '{{object_id}}';
        let contentType = 'application/json';
        let body = '{\n\t"supervisors": {{object_id[]}}\n}';

        controller.updateByIDEditDeptSupervisors(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });
});
