/**
 * StagCopyLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.UsersController;
const CreateOneWithPassword = testerlib.CreateOneWithPassword;
const Paginated = testerlib.Paginated;
const SelfActivateDepretiatedRequest = testerlib.SelfActivateDepretiatedRequest;
const Success = testerlib.Success;

describe("UsersController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Changes the user's password using an activation, recovery or regular token. Note that with the later, you will need to provide the "old_password" for the request to complete.
     */
    it("should testSelfChangePassword response", function testSelfChangePasswordTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = '{\n\t"password": <new password>, \n\t"old_passwd": <old password>\n}';

        controller.updateSelfChangePassword(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Delete a user from his id
     */
    it("should testByIDDeleteUser response", function testByIDDeleteUserTest(done) {
        // parameters for the API call
        let id = '<object_id>';

        controller.deleteByIDDeleteUser(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Returns a user informations from his ID
     */
    it("should testByIDGetUser response", function testByIDGetUserTest(done) {
        // parameters for the API call
        let id = '<object_id>';

        controller.getByIDGetUser(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['X-Powered-By'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

    /**
     * Creates a user
     */
    it("should testCreateOne response", function testCreateOneTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = '{\n\t"email_addr": {{email_address}}, \n\t"first_name": {{first_name}}, \n\t"last_name": {{last_name}}\n}';

        controller.createOne(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['X-Powered-By'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "status": 0,
  "_id": "5cf26a5f758af02a4c684bc9",
  "email_addr": "test@test.com",
  "first_name": "test",
  "last_name": "subject",
  "hash": "$2b$10$0JNfu7wuA8J1aNxXDX4ll.qttIMhRl9DnwMJAnszMxry5arADgdMS",
  "created_on": "2019-06-01T12: 06: 55.546Z",
  "modified_on": "2019-06-01T12: 06: 55.548Z",
  "__v": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Returns a list of users matching a given query
     */
    it("should testListUsers response", function testListUsersTest(done) {
        // parameters for the API call
        let gt = '{{field_name}}:{{value}}';
        let gte = '{{field_name}}:{{value}}';
        let lt = '{{field_name}}:{{value}}';
        let lte = '{{field_name}}:{{value}}';
        let select = '{{field_name_1}} {{field_name_N}}...';
        let sort = '{{field_name_ASC}} -{{field_name_DSC}}...';
        let limit = '{{number}}';
        let page = '{{number}}';

        controller.listUsers(gt, gte, lt, lte, select, sort, limit, page, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['X-Powered-By'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isArrayOfJsonObjectsProperSubsetOf(context.response.body, [
  {
    "status": 0,
    "_id": "5cc82f9f9451710abfb601e9",
    "first_name": "tata",
    "last_name": "tram",
    "email_addr": "tata@epitech.eu",
    "hash": "$2b$10$kNyjbgMXcyNIXbJUCBLtFu5fQxRX77w.TXUS4CjZgu9y.iLSqCAnO",
    "created_on": "2019-04-30T11: 21: 03.693Z",
    "modified_on": "2019-04-30T11: 21: 03.698Z",
    "__v": 0
  },
  {
    "status": 11,
    "_id": "5ccdf84bc1afd0502ce561b5",
    "first_name": "flo",
    "last_name": "hu",
    "email_addr": "florence.hu@epitech.eu",
    "hash": "$2b$10$NuxWCFB7rT.ihV4ZqQotGejQvEKx2hfLVgjM1qRm85RttoBwC9W6C",
    "created_on": "2019-05-04T20: 38: 35.613Z",
    "modified_on": "2019-05-14T08: 30: 23.401Z",
    "__v": 0
  },
  {
    "status": 0,
    "_id": "5ccefdace4e87452cf73b1a5",
    "last_name": "bar",
    "first_name": "rab",
    "email_addr": "rabbar@ah.oh",
    "created_on": "2019-05-05T15: 13: 48.777Z",
    "modified_on": "2019-05-09T20: 41: 51.015Z",
    "__v": 0
  },
  {
    "status": 11,
    "_id": "5ccf05941692a85e385e98d5",
    "last_name": "poulet",
    "first_name": "rab",
    "email_addr": "rallouf@ah.oh",
    "created_on": "2019-05-05T15: 47: 32.656Z",
    "modified_on": "2019-05-14T07: 27: 23.756Z",
    "__v": 0
  },
  {
    "status": 0,
    "_id": "5cd2efc1ab6a9f389b5858e2",
    "email_addr": "email@yopmail.com",
    "first_name": "yoplait",
    "last_name": "pokemon",
    "created_on": "2019-05-08T15: 03: 29.407Z",
    "modified_on": "2019-05-08T15: 03: 29.409Z",
    "__v": 0
  }
], false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Changes the user status.
To request the activation of a user, the status in the request should be 10.

### Status Enumeration
| Code | Description |
| ----------- | ----------- |
| 0 | NOT_ACTIVED |
| 1 | ACTIVATED |
| 10 | REQUESTED_ACTIVATION |
| 11 | WAITING_FOR_ACTIVATION |
     */
    it("should testByIDChangeStatus response", function testByIDChangeStatusTest(done) {
        // parameters for the API call
        let id = '<object_id>';
        let contentType = 'application/json';
        let body = '{\n\t"status": <number>\n}';

        controller.updateByIDChangeStatus(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Changes the user status.
To request the activation of a user, the status in the request should be 10.

### Status Enumeration
| Code | Description |
| ----------- | ----------- |
| 0 | NOT_ACTIVED |
| 1 | ACTIVATED |
| 10 | REQUESTED_ACTIVATION |
| 11 | WAITING_FOR_ACTIVATION |
     */
    it("should testByIDChangeStatus1 response", function testByIDChangeStatus1Test(done) {
        // parameters for the API call
        let id = '<object_id>';
        let contentType = 'application/json';
        let body = '{\n\t"status": <number>\n}';

        controller.updateByIDChangeStatus(id, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * ### DESCRIPTION
Request activation for a user

### BODY EXEMPLE
{
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdGFnLmxvY2FsIiwic3ViIjoiNWNjZjA1OTQxNjkyYTg1ZTM4NWU5OGQ1Iiwic2NvcGUiOlsiYWN0aXZhdGlvbiJdLCJqdGkiOiI2MmE5Y2U2Ny02N2E0LTQzOTktYmUzOS04Yjk2MTEwMTQxNzkiLCJpYXQiOjE1NTc3NDY3MzEsImV4cCI6MTU1Nzc1MDMzMX0.N4vIpwB402ypOQRaf9MCvcBkoAtwHO0emCxl3J-c5AY"
}
     */
    it("should testSelfActivateDepretiated response", function testSelfActivateDepretiatedTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdGFnLmxvY2FsIiwic3ViIjoiNWNjZjA1OTQxNjkyYTg1ZTM4NWU5OGQ1Iiwic2NvcGUiOlsiYWN0aXZhdGlvbiJdLCJqdGkiOiI2MmE5Y2U2Ny02N2E0LTQzOTktYmUzOS04Yjk2MTEwMTQxNzkiLCJpYXQiOjE1NTc3NDY3MzEsImV4cCI6MTU1Nzc1MDMzMX0.N4vIpwB402ypOQRaf9MCvcBkoAtwHO0emCxl3J-c5AY"
}, 'SelfActivateDepretiatedRequest');

        controller.updateSelfActivateDepretiated(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Generates a new "password recovery" token for the provided user.
     */
    it("should testByEmailAskForPasswordRecovery response", function testByEmailAskForPasswordRecoveryTest(done) {
        // parameters for the API call
        let emailAddr = '<string>';

        controller.createByEmailAskForPasswordRecovery(emailAddr, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['X-Powered-By'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdGFnLmxvY2FsIiwic3ViIjoiNWNmMjZhNWY3NThhZjAyYTRjNjg0YmM5Iiwic2NvcGUiOlsicGFzc3dvcmRfcmVjb3ZlcnkiXSwianRpIjoiZmMwMzc4ZTAtZDNhNS00NDgwLWJkMDItMjcwNmI1MWY5NGFiIiwiaWF0IjoxNTU5Mzk0Nzc5LCJleHAiOjE1NTkzOTgzNzl9.3NdVyKxNvn61k4Gh6mk9WOgA6U1eYf4KZExUWIjI5WE"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
