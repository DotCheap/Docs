/**
 * StagCopyLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.AuthController;
const Success = testerlib.Success;
const LogInAuthoriseRequest = testerlib.LogInAuthoriseRequest;
const Verification = testerlib.Verification;

describe("AuthController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * ### DESCRIPTION
Get a authentification token.

### Returns
```JSON
{
	"token": <token>
}
```
     */
    it("should testLogInAuthorise response", function testLogInAuthoriseTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "email_addr": "soum@yopmail.com",
  "password": "soumeya"
}, 'LogInAuthoriseRequest');

        controller.createLogInAuthorise(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['X-Powered-By'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['Set-Cookie'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdGFnLmxvY2FsIiwic3ViIjoiNWNmMjZhNWY3NThhZjAyYTRjNjg0YmM5Iiwic2NvcGUiOlsicmVndWxhciJdLCJqdGkiOiJkM2VjMDQxOC1lMWUyLTQ1OGYtOTI3OC04NGJjNGI4MTZjZGQiLCJpYXQiOjE1NTkzOTQ0NTYsImV4cCI6MTU1OTM5ODA1Nn0.B5Do28lfDuR_2e9P74WdKnFZqUwCYkfJyyZSnZpB2JM"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Verify a JWT and return the parsed result.
     */
    it("should testVerify response", function testVerifyTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let body = '{\n\t"access_token": <optional token that can also be sent via cookie>\n}';

        controller.createVerify(contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['X-Powered-By'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "scope": {
    "header": {
      "typ": "JWT",
      "alg": "HS256"
    },
    "body": {
      "iss": "stag.local",
      "sub": "5cf26a5f758af02a4c684bc9",
      "scope": [
        "regular"
      ],
      "jti": "d3ec0418-e1e2-458f-9278-84bc4b816cdd",
      "iat": 1559394456,
      "exp": 1559398056
    }
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
